### us TS
https://docs.expo.dev/guides/typescript/#advanced-types

### Snack
https://snack.expo.dev/

### ngrok
npm i -g @expo/ngrok
npx expo start --tunnel

### Price
https://expo.dev/pricing

### EAS / Apple App Store / Google Play Store
https://docs.expo.dev/build/setup/

### Expo CLI(unfinish)
https://docs.expo.dev/workflow/expo-cli/
npx expo start --offline

### Using libraries
	React Native Core Libraries
		ActivityIndicator, TextInput, Text, ScrollView, and View
	Expo SDK Libraries
		audio, barcode scanning, camera, calendar, contacts, video
		import Device from 'expo-device'
	Third-Party Libraries

### Viewing logs
	Console logs
	Native logs
	System logs

### Development and production modes
	Development Mode
		emote JavaScript debugging in Chrome, 
		live reload, 
		hot reloading, 
		an element inspector similar to the beloved inspector that you use in Chrome
		https://docs.expo.dev/workflow/debugging/
	Production Mode
		Testing your app's performance
		Catching bugs that only show up in production
		npx expo start --no-dev --minify

### iOS Simulator
### Android Studio Emulator
### Running on device
	Expo Go
	Running a project with a development build
	Running a project as a standalone app

### Debugging
	Native Debugging
		Xcode
		Android Studio
	Production errors

### Configuration with app.json
	https://docs.expo.dev/versions/latest/config/app/
	Dynamic configuration with app.config.js
	Switching configuration based on the environment
	Using TypeScript for configuration: app.config.ts instead of app.config.js

### Adding custom native code

### Upgrading Expo SDK
	https://docs.expo.dev/workflow/upgrading-expo-sdk-walkthrough/

### Developing for Web (need test)

### Snack
	Adding a library
	Saving and sharing code
	Embed it on your website

### Prebuild
	generates the native code
	Usage
		expo prebuild
		expo prebuild --clean
	Usage with EAS Build
	Usage with Expo CLI run commands

# Distributing App

### Submitting to the Apple App Store
	https://docs.expo.dev/submit/ios/
	A paid developer account is required
	EAS CLI installed & Expo account
	1. Build a standalone app
	2. Start the submission
		eas submit -p ios
	Submitting your app using CI

### Submitting to the Google Play Store
	https://docs.expo.dev/submit/android/

### App Store Best Practices
	Version app
		https://docs.expo.dev/build-reference/app-versions/
		version/android.versionCode/ios.buildNumber
		Remote version source
			rely on EAS servers to store and manage the version of your app. / eas.json
		Local version source
	EAS Metadata			
		provide all necessary information to the stores and get your app published
	Permissions
		访问user的设备敏感信息，需要申请权限，否则app会被拒绝发布
		iOS
			expo.ios.infoPlist
			https://developer.apple.com/design/human-interface-guidelines/patterns/accessing-private-data/
			https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW1
		Android
	App Icon
